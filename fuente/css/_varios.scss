@use "sass:map";
/************AVISO************
El presente documento sólo pretende dar a conocer, de forma breve, las posibilidades de SASS.
Para conocer el verdadero potencial de cada elemento, hay que acudir a la página oficial https://sass-lang.com/documentation
*****************************/

/*COMENTARIOS*/
//Este comentario no irá en el CSS
/*Este comentario irá en el CSS, salvo que se use el modo comprimido*/
/*!Este comentario siempre irá en el CSS*/

/*VARIABLES
Globales, definidas al principio del documento, fuera de toda clase o etiqueta, o locales, definidas dentro de una clase o etiqueta)
En caso de conflicto se usa la local
Las variables deberían estar todas en el mismo fichero _variables.scss
*/

$color_fondo:blue;  //variable global
$color_fondo: green !default; //Se asigna el valor "green" SÓLO SI $color_fondo no tenía valor antes o no existía
body{
  $color-fondo:red; //variable local
  background-color: $color-fondo; //compilará a red
  color: $color-texto;
}

/*FUNCIONES: Ver el archivo _funciones.scss*/

/*MIXINS
Los Mixins permiten reutilizar el mismo código css en diferentes partes invocándolo por su nombre. Permiten usar argumentos 
En este se ha usado una función ("masOscuro", definida en el fichero _funciones.scss)*/

  @mixin formato-texto($tamanyo:2rem) { //Se usa un valor por defecto para el parámetro
    text-align: center;
    color: masOscuro($color-texto2);
    font-weight: bold;
    font-size: $tamanyo;
  }
  //Aquí invoco al mixin en cuatro partes distintas del código con un argumento (aunque luego no le hago nada dentro del mixin)
  main, footer{
    p, .clase{
      @include formato-texto(1.25em);
    }
  }

/*ANIDACIÓN DE SELECTORES
Se usa el operador & para referenciar al padre (en este caso a .header)*/
.header {
  width: $anchura;
  margin: 0 auto;

  &-primero {
    color: $color-enlace;
  }

  .segundo{
    color: $color-enlace;
  }
} 


//Ejemplo de selectores anidados, mixins con parámetros y uso de fórmulas (en el parámetro del segundo mixin)
nav{
  h1{
    @include formato-texto(2em);
  }
  p{
    @include formato-texto(pasaPXaREM(100));
  }
}


/*LISTAS
Colección de valores, se accede por índice. Primer elemento = 1*/
$tamanyos:(40px, 80px, 160px);
.banner {
  h1{
    font-size: nth($tamanyos,2);  //nth me devuelve el elemento nº2 de una lista
  }
}

/*MAPAS
Son parecidos a las listas, pero incorporan una llave para acceder a los valores*/
$error:(
  "leve": 1rem,
  "medio": 2rem,
  "grave": 2.5rem
);

.error-leve{
  font-size: map.get($error, "leve");
}

/*ESTRUCTURAS DE CONTROL

/*EACH
 Puedo recorrer los valores de un mapa o lista y crear clases nuevas usando la interpolación mediante la almohadilla*/
@each $nombre, $value in $error {
  .error-#{$nombre} {
    font-size: $value;
  }
}
/*EACH
cada usuario con su imagen*/
$mapa: (
  pepe: "pepe.png",
  lola: "lola.png",
  manuel: "manuel.png"
);
@each $u, $v in $mapa {
  .perfil-#{$u} {
    background: image-url("img/#{$v}") no repeat;
  }
}

//IF-ELSE
$light-theme: true;
$dark-theme: false;
header {
  @if $light-theme == true {
    background-color: #fff;
    color: #000;
  } @else if $dark-theme {
    background-color: #000;
    color: #fff;
  } @else {
    //Default theme
    background-color: #aaa;
    color: #444;
  }
}

/*WHILE
 cada td de la tabla con un color*/
$num: 1;
$color-list:(#0f0, #00f, orange, #ccc);
@while $num < 5 {
  td:nth-child(#{$num}) {
    color: #f00;
    background-color: nth($color-list, $num);
  }
  $num: $num + 1;
}

/* FOR
cada párrafo de un color*/
@for $i from 1 to 5 {
  p:nth-of-type(#{$i}) {
    color: #f00;
    background-color: nth($color-list, $i);
  }
}



/*RECORRIDO DE MAPAS CON MÁS DE UN VALOR POR CLAVE E INTERPOLACIÓN*/
$buttons: (
  error: (#d82d2d, #666),
  success: (#52bf4a, #fff),
  warning: (#c23435, #fff)
);

.m-button {
  display: inline-block;
  padding: .5em;
  background: #ccc;
  color: #666;

  @each $name, $colors in $buttons {
    $bgcolor: nth($colors, 1);
    $fontcolor: nth($colors, 2);
    &--#{$name} {
      background-color: $bgcolor;
      color: $fontcolor;
    }  
  }
}


/*INTERPOLACIÓN*/
//También funciona en los comentarios. Se usa la almohadilla
$autor: "Chiquito de la calzada";
/*Web desarrollada por #{$autor}*/


/*OPERADORES CONDICIONALES*/
$modo-oscuro:true;
body{
  @if $modo-oscuro {
    color: $color-texto-oscuro;
    background-color: $color-fondo-oscuro;
  }
  @else {
    color: $color-texto-claro;
    background-color: $color-fondo-claro;
  }
}

/*HERENCIA
Si se quiere declarar una regla sólo para que las demás hereden de ella (lo que se llama clase abstracta en algunos lenguajes de programación), se antepone %
Para heredar de un elemento se usa @extend

Herencia vs Mixins
La herencia se usa cuando tiene sentido semánticamente que algunas clases hereden de otras como, por ejemplo, .error-grave y .error-leve podrían heredar de .error los elementos comunes
Si necesitamos usar variables, hay que usar mixins 
*/
%error{  //este elemento sólo existe para que otros hereden de él
  color: red;
}

.error-leve{
  @extend %error;
  font-size: 1rem;
}

.error-grave{
  @extend %error;
  font-size: 2rem;
}

